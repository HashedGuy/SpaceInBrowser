{"ast":null,"code":"import _createClass from \"/Users/arbus/Documents/SpaceInBrowser/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/arbus/Documents/SpaceInBrowser/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _possibleConstructorReturn from \"/Users/arbus/Documents/SpaceInBrowser/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _inherits from \"/Users/arbus/Documents/SpaceInBrowser/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/arbus/Documents/SpaceInBrowser/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\nimport { ExtrudeGeometry } from 'three';\n\nvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n  _inherits(TextGeometry, _ExtrudeGeometry);\n\n  var _super = _createSuper(TextGeometry);\n\n  function TextGeometry(text) {\n    var _this;\n\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TextGeometry);\n\n    var font = parameters.font;\n\n    if (font === undefined) {\n      _this = _super.call(this); // generate default extrude geometry\n    } else {\n      var shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n      parameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n      if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n      if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n      if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n      _this = _super.call(this, shapes, parameters);\n    }\n\n    _this.type = 'TextGeometry';\n    return _possibleConstructorReturn(_this);\n  }\n\n  return _createClass(TextGeometry);\n}(ExtrudeGeometry);\n\nexport { TextGeometry };","map":{"version":3,"sources":["/Users/arbus/Documents/SpaceInBrowser/node_modules/three/examples/jsm/geometries/TextGeometry.js"],"names":["ExtrudeGeometry","TextGeometry","text","parameters","font","undefined","shapes","generateShapes","size","depth","height","bevelThickness","bevelSize","bevelEnabled","type"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACCA,eADD,QAEO,OAFP;;IAIMC,Y;;;;;AAEL,wBAAaC,IAAb,EAAqC;AAAA;;AAAA,QAAlBC,UAAkB,uEAAL,EAAK;;AAAA;;AAEpC,QAAMC,IAAI,GAAGD,UAAU,CAACC,IAAxB;;AAEA,QAAKA,IAAI,KAAKC,SAAd,EAA0B;AAEzB,gCAFyB,CAEhB;AAET,KAJD,MAIO;AAEN,UAAMC,MAAM,GAAGF,IAAI,CAACG,cAAL,CAAqBL,IAArB,EAA2BC,UAAU,CAACK,IAAtC,CAAf,CAFM,CAIN;;AAEAL,MAAAA,UAAU,CAACM,KAAX,GAAmBN,UAAU,CAACO,MAAX,KAAsBL,SAAtB,GAAkCF,UAAU,CAACO,MAA7C,GAAsD,EAAzE,CANM,CAQN;;AAEA,UAAKP,UAAU,CAACQ,cAAX,KAA8BN,SAAnC,EAA+CF,UAAU,CAACQ,cAAX,GAA4B,EAA5B;AAC/C,UAAKR,UAAU,CAACS,SAAX,KAAyBP,SAA9B,EAA0CF,UAAU,CAACS,SAAX,GAAuB,CAAvB;AAC1C,UAAKT,UAAU,CAACU,YAAX,KAA4BR,SAAjC,EAA6CF,UAAU,CAACU,YAAX,GAA0B,KAA1B;AAE7C,gCAAOP,MAAP,EAAeH,UAAf;AAEA;;AAED,UAAKW,IAAL,GAAY,cAAZ;AA1BoC;AA4BpC;;;EA9ByBd,e;;AAmC3B,SAASC,YAAT","sourcesContent":["/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n"]},"metadata":{},"sourceType":"module"}